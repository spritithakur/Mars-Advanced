{
	"info": {
		"_postman_id": "ea91ea53-dc43-4093-b09d-0ad67cf9b5ad",
		"name": "DummyAPI_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23437965"
	},
	"item": [
		{
			"name": "Positive Scenarios",
			"item": [
				{
					"name": "Get a single employee data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"validate the JSON key value pairs in response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"success\");\r",
									"     pm.expect(jsonData.data.id).to.eql(1);\r",
									"      pm.expect(jsonData.data.employee_name).to.eql(\"Tiger Nixon\");\r",
									"       pm.expect(jsonData.data.employee_salary).to.eql(320800);\r",
									"          pm.expect(jsonData.message).to.eql(\"Successfully! Record has been fetched.\");\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"success\");\r",
									"    pm.expect(pm.response.text()).to.include(\"Tiger Nixon\");\r",
									"    \r",
									"\r",
									"});\r",
									"var schema = {\r",
									" \r",
									"      \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"           \"id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"\r",
									"            \"employee_name\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"             \r",
									"            \"employee_salary\": {\r",
									"                \"type\": \"integer\"\r",
									"            },\r",
									"\r",
									"            \"employee_age\": {\r",
									"                \"type\": \"integer\"\r",
									"            },\r",
									"\r",
									"             \"avatar\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"\r",
									"\r",
									"      }\r",
									"      }\r",
									"}\r",
									"\r",
									"pm.test(\"JSON schema validation\", function() {\r",
									" var result=tv4.validateResult(pm.response.json(),schema);\r",
									"\r",
									" if(result.valid){\r",
									"     console.log(result);\r",
									"\r",
									" }\r",
									" pm.expect(result.valid).to.be.true;\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Header Value\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"    pm.expect(pm.response.headers.get(\"Cache-Control\")).to.eql(\"max-age=21600\");\r",
									"   \r",
									"  \r",
									"});\r",
									"\r",
									"pm.test(\"Response time is above 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Successful GET Request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BaseUrl}}/api/v1/employee/1",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"employee",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all employee data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"validate the JSON key pairs in response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"success\");\r",
									"    pm.expect(jsonData.data[0].id).to.eql(1);\r",
									"    pm.expect(jsonData.data[0].employee_name).to.eql(\"Tiger Nixon\");\r",
									"    pm.expect(jsonData.data[0].employee_salary).to.eql(320800);\r",
									"});\r",
									"\r",
									"\r",
									"var schema = {\r",
									" \r",
									"      \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"           \"id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"\r",
									"            \"employee_name\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"             \r",
									"            \"employee_salary\": {\r",
									"                \"type\": \"integer\"\r",
									"            },\r",
									"\r",
									"            \"employee_age\": {\r",
									"                \"type\": \"integer\"\r",
									"            },\r",
									"\r",
									"             \"avatar\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"\r",
									"\r",
									"      }\r",
									"      }\r",
									"}\r",
									"              \r",
									"\r",
									"pm.test(\"JSON schema validation\", function() {\r",
									" var result=tv4.validateResult(pm.response.json(),schema);\r",
									"\r",
									" if(result.valid){\r",
									"     console.log(result);\r",
									"\r",
									" }\r",
									" pm.expect(result.valid).to.be.true;\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Successful message validation\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Successfully! All records has been fetched.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Header Value\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"    pm.expect(pm.response.headers.get(\"Cache-Control\")).to.eql(\"max-age=21600\");\r",
									"   \r",
									"  \r",
									"});\r",
									"\r",
									"pm.test(\"Response time is above 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Successful GET Request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/api/v1/employees",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"employees"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new record in database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Assertion:1- Status code check\r",
									"pm.test(\"Status code check\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Assertion:2 - Response value check\r",
									"pm.test(\"Check JSON key value pairs in the response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.name).to.eql(\"sprite\");\r",
									"    pm.expect(jsonData.data.salary).to.eql(\"542561\");\r",
									"    pm.expect(jsonData.data.age).to.eql(\"51\");\r",
									"    \r",
									"    pm.environment.set(\"employeeID\", jsonData.data.id);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Header Value\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"    pm.expect(pm.response.headers.get(\"Cache-Control\")).to.eql(\"max-age=21600\");\r",
									"   \r",
									"  \r",
									"});\r",
									"\r",
									"var schema = \r",
									"{\r",
									"    \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"status\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"name\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"salary\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"age\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"id\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"name\",\r",
									"        \"salary\",\r",
									"        \"age\",\r",
									"        \"id\"\r",
									"      ]\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"status\",\r",
									"    \"data\",\r",
									"    \"message\"\r",
									"  ]\r",
									"\r",
									"}\r",
									"\r",
									"pm.test(\"JSON schema validation\", function() {\r",
									" var result=tv4.validateResult(pm.response.json(),schema);\r",
									"\r",
									" if(result.valid){\r",
									"     console.log(result);\r",
									"\r",
									" }\r",
									" pm.expect(result.valid).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Header Value\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"    pm.expect(pm.response.headers.get(\"Cache-Control\")).to.eql(\"max-age=21600\");\r",
									"   \r",
									"  \r",
									"});\r",
									"\r",
									"pm.test(\"Response time is above 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST Request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"pm.collectionVariables.set(\"name\", \"sprite\");\r",
									"pm.collectionVariables.set(\"salary\",\"542561\");\r",
									"pm.collectionVariables.set(\"age\",\"51\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n    \"name\" : \"{{name}}\",\r\n    \"salary\" : \"{{salary}}\",\r\n    \"age\" : \"{{age}}\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/api/v1/create",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an employee record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Assertion:1- Status code check\r",
									"pm.test(\"Status code check\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Assertion:2 - Response value check\r",
									"pm.test(\"Check JSON key value pairs in the response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.name).to.eql(\"sprite\");\r",
									"    pm.expect(jsonData.data.salary).to.eql(\"542561\");\r",
									"    pm.expect(jsonData.data.age).to.eql(\"55\");\r",
									"   \r",
									"});\r",
									"\r",
									"pm.test(\"check key-pair value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.name).to.eql(\"sprite\");\r",
									"    pm.expect(jsonData.data.salary).to.eql(\"542561\");\r",
									"    pm.expect(jsonData.data.age).to.eql(\"55\");\r",
									"});\r",
									"pm.test(\"Header Value\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"    pm.expect(pm.response.headers.get(\"Cache-Control\")).to.eql(\"max-age=21600\");\r",
									"    \r",
									"});\r",
									"\r",
									"\r",
									"var schema = \r",
									"{\r",
									"\"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"status\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"name\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"salary\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"age\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"name\",\r",
									"        \"salary\",\r",
									"        \"age\"\r",
									"      ]\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"status\",\r",
									"    \"data\",\r",
									"    \"message\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"JSON schema validation\", function() {\r",
									" var result=tv4.validateResult(pm.response.json(),schema);\r",
									"\r",
									" if(result.valid){\r",
									"     console.log(result);\r",
									"\r",
									" }\r",
									" pm.expect(result.valid).to.be.true;\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response time is above 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful PUT Request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"pm.collectionVariables.set(\"name\", \"sprite\");\r",
									"pm.collectionVariables.set(\"salary\",\"542561\");\r",
									"pm.collectionVariables.set(\"age\",\"55\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n    \"name\" : \"{{name}}\",\r\n    \"salary\" : \"{{salary}}\",\r\n    \"age\" : \"{{age}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/api/v1/update/{{employeeID}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"update",
								"{{employeeID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete an employee record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Assertion:1- Status code check\r",
									"pm.test(\"Status code check\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Assertion:2 - Response value check\r",
									"pm.test(\"Check JSON key value pairs in the response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"success\");\r",
									"    pm.expect(jsonData.data).to.eql(pm.environment.get(\"employeeID\").toString());\r",
									"    pm.expect(jsonData.message).to.eql(\"Successfully! Record has been deleted\");\r",
									"   \r",
									"});\r",
									"\r",
									"pm.test(\"Header Value\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"    pm.expect(pm.response.headers.get(\"Cache-Control\")).to.eql(\"max-age=21600\");\r",
									"   \r",
									"  \r",
									"});\r",
									"\r",
									"\r",
									"var schema = {\r",
									"\"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"status\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"status\",\r",
									"    \"data\",\r",
									"    \"message\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"JSON schema validation\", function() {\r",
									" var result=tv4.validateResult(pm.response.json(),schema);\r",
									"\r",
									" if(result.valid){\r",
									"     console.log(result);\r",
									"\r",
									" }\r",
									" pm.expect(result.valid).to.be.true;\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Response time is above 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful DEL Request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/api/v1/delete/{{employeeID}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"delete",
								"{{employeeID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative Scenario",
			"item": [
				{
					"name": "Get Employee data without providing Employee ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is above 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the JSON key value pairs in response (Should be the error message)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Error Occured! Page Not found, contact rstapi2example@gmail.com\");\r",
									"});\r",
									"\r",
									"pm.test(\"Header Value\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"    pm.expect(pm.response.headers.get(\"Cache-Control\")).to.eql( 'no-cache, private');\r",
									"   \r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"JSON schema validation\", function() {\r",
									" var result=tv4.validateResult(pm.response.json(),schema);\r",
									"\r",
									" if(result.valid){\r",
									"     console.log(result);\r",
									"\r",
									" }\r",
									" pm.expect(result.valid).to.be.true;\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/api/v1/employee/",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"employee",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get employee data  with invalid Method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 405 (Method not allowed\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/html; charset=UTF-8\");\r",
									"     pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"Upgrade\");\r",
									"      pm.expect(pm.response.headers.get(\"Cache-Control\")).to.eql('no-cache, private');\r",
									"\r",
									"});\r",
									"pm.test(\"Response time is above 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/api/v1/employee/1",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"employee",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete an employee record with invalid employee ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check the JSON key value pairs in response (Should be the error message)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Error Occured! Page Not found, contact rstapi2example@gmail.com\");\r",
									"});\r",
									"\r",
									"pm.test(\"Header Value\", function () {\r",
									" \r",
									"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"    pm.expect(pm.response.headers.get(\"Cache-Control\")).to.eql( 'no-cache, private');\r",
									"  \r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"JSON schema validation\", function() {\r",
									" var result=tv4.validateResult(pm.response.json(),schema);\r",
									"\r",
									" if(result.valid){\r",
									"     console.log(result);\r",
									"\r",
									" }\r",
									" pm.expect(result.valid).to.be.true;\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Response time is above 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/api/v1/delete/",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"delete",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new record with Body written in Javascript",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 406 (NOT Acceptable)\", function () {\r",
									"    pm.response.to.have.status(406);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Not Acceptable!\");\r",
									"    pm.expect(pm.response.text()).to.include(\"An appropriate representation of the requested resource could not be found on this server. This error was generated by Mod_Security.\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Header Value\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/html; charset=iso-8859-1\");\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"Keep-Alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is above 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n\"<?xml version\"=\"1.0\" encoding=\"UTF-8\" ?>\r\n<root>\r\n  <name>spriti</name>\r\n  <salary>123456789</salary>\r\n  <age>52</age>\r\n</root>\r\n",
							"options": {
								"raw": {
									"language": "javascript"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/api/v1/create",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user with invalid JSON payload (Test Case Should fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 405(method not allowed)\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"\r",
									"//Test Case should fail because of invalid JSON Schema\r",
									"var schema = {\r",
									"\"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"status\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  }\r",
									"}\r",
									"pm.test(\"JSON schema validation\", function() {\r",
									" var result=tv4.validateResult(pm.response.json(),schema);\r",
									"\r",
									" if(result.valid){\r",
									"     console.log(result);\r",
									"\r",
									" }\r",
									" pm.expect(result.valid).to.be.true;\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/api/v1/update/{{employeeID}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"update",
								"{{employeeID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new record with invalid Headers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404(Not Found)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is above 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Not Found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"connection": true,
							"accept-encoding": true,
							"accept": true,
							"host": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/api/v1/create",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new record with invalid UUID in Path",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"pm.collectionVariables.set(\"name\", \"sprite\");\r",
									"pm.collectionVariables.set(\"salary\",\"542561\");\r",
									"pm.collectionVariables.set(\"age\",\"51\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is above 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Header Value\", function () {\r",
									" \r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/html; charset=UTF-8\");\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"Upgrade\");\r",
									"     \r",
									"  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n    \"name\" : \"{{name}}\",\r\n    \"salary\" : \"{{salary}}\",\r\n    \"age\" : \"{{age}}\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/api/v1/:123",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"v1",
								":123"
							],
							"variable": [
								{
									"key": "123",
									"value": "Newcreate"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BaseUrl",
			"value": "https://dummy.restapiexample.com",
			"type": "string"
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "salary",
			"value": ""
		},
		{
			"key": "age",
			"value": ""
		},
		{
			"key": "email",
			"value": ""
		}
	]
}