{
	"info": {
		"_postman_id": "e2228020-ed60-48be-93c5-ce34289c2752",
		"name": "Petstore Swagger_3",
		"description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.\n\nContact Support:\n Email: apiteam@swagger.io",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23437965"
	},
	"item": [
		{
			"name": "pet",
			"item": [
				{
					"name": "{pet Id}",
					"item": [
						{
							"name": "Positive Scenarios",
							"item": [
								{
									"name": "Finds Pets by status available",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Header Value\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
													"     pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Successful GET Request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
													"});\r",
													"pm.test(\"Response time is above 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/pet/findByStatus?status=available",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet",
												"findByStatus"
											],
											"query": [
												{
													"key": "status",
													"value": "available"
												}
											]
										},
										"description": "Multiple status values can be provided with comma separated strings"
									},
									"response": [
										{
											"name": "Invalid status value",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/pet/findByStatus?status=available,available",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pet",
														"findByStatus"
													],
													"query": [
														{
															"key": "status",
															"value": "available,available"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/pet/findByStatus?status=available,available",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pet",
														"findByStatus"
													],
													"query": [
														{
															"key": "status",
															"value": "available,available"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n   \"id\": \"<long>\",\n   \"name\": \"<string>\"\n  },\n  \"tags\": [\n   {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n   }\n  ],\n  \"status\": \"<string>\"\n },\n {\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n   \"id\": \"<long>\",\n   \"name\": \"<string>\"\n  },\n  \"tags\": [\n   {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n   }\n  ],\n  \"status\": \"<string>\"\n }\n]"
										}
									]
								},
								{
									"name": "Finds Pets by tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var schema = \r",
													"{\r",
													"  \r",
													"  \"type\": \"array\",\r",
													"  \"items\": {}\r",
													"}\r",
													"pm.test(\"JSON schema validation\", function() {\r",
													" var result=tv4.validateResult(pm.response.json(),schema);\r",
													"\r",
													" if(result.valid){\r",
													"     console.log(result);\r",
													"\r",
													" }\r",
													" pm.expect(result.valid).to.be.true;\r",
													"})\r",
													"\r",
													"//Check the response time\r",
													"pm.test(\"Response time is above 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Header Value\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
													"     pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
													"});\r",
													"\r",
													"pm.test(\"Successful GET Request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/pet/findByTags?tags=<string>,<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet",
												"findByTags"
											],
											"query": [
												{
													"key": "tags",
													"value": "<string>,<string>",
													"description": "Tags to filter by"
												}
											]
										},
										"description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/pet/findByTags?tags=<string>,<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pet",
														"findByTags"
													],
													"query": [
														{
															"key": "tags",
															"value": "<string>,<string>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n   \"id\": \"<long>\",\n   \"name\": \"<string>\"\n  },\n  \"tags\": [\n   {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n   }\n  ],\n  \"status\": \"<string>\"\n },\n {\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n   \"id\": \"<long>\",\n   \"name\": \"<string>\"\n  },\n  \"tags\": [\n   {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n   }\n  ],\n  \"status\": \"<string>\"\n }\n]"
										},
										{
											"name": "Invalid tag value",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/pet/findByTags?tags=<string>,<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pet",
														"findByTags"
													],
													"query": [
														{
															"key": "tags",
															"value": "<string>,<string>"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Find Pets by Status Sold",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Header Value\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
													"     pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"     \"type\": \"array\",\r",
													"  \"items\": [\r",
													"    {\r",
													"      \"type\": \"object\",\r",
													"      \"properties\": {\r",
													"        \"id\": {\r",
													"          \"type\": \"integer\"\r",
													"        },\r",
													"        \"category\": {\r",
													"          \"type\": \"object\",\r",
													"          \"properties\": {\r",
													"            \"id\": {\r",
													"              \"type\": \"integer\"\r",
													"            },\r",
													"            \"name\": {\r",
													"              \"type\": \"string\"\r",
													"            }\r",
													"          },\r",
													"          \"required\": [\r",
													"            \"id\",\r",
													"            \"name\"\r",
													"          ]\r",
													"        },\r",
													"        \"name\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"photoUrls\": {\r",
													"          \"type\": \"array\",\r",
													"          \"items\": [\r",
													"            {\r",
													"              \"type\": \"string\"\r",
													"            }\r",
													"          ]\r",
													"        },\r",
													"        \"tags\": {\r",
													"          \"type\": \"array\",\r",
													"          \"items\": [\r",
													"            {\r",
													"              \"type\": \"object\",\r",
													"              \"properties\": {\r",
													"                \"id\": {\r",
													"                  \"type\": \"integer\"\r",
													"                },\r",
													"                \"name\": {\r",
													"                  \"type\": \"string\"\r",
													"                }\r",
													"              },\r",
													"              \"required\": [\r",
													"                \"id\",\r",
													"                \"name\"\r",
													"              ]\r",
													"            }\r",
													"          ]\r",
													"        },\r",
													"        \"status\": {\r",
													"          \"type\": \"string\"\r",
													"        }\r",
													"      },\r",
													"      \"required\": [\r",
													"        \"id\",\r",
													"        \"category\",\r",
													"        \"name\",\r",
													"        \"photoUrls\",\r",
													"        \"tags\",\r",
													"        \"status\"\r",
													"      ]\r",
													"    }\r",
													"  ]\r",
													"}\r",
													"pm.test(\"JSON schema validation\", function() {\r",
													" var result=tv4.validateResult(pm.response.json(),schema);\r",
													"\r",
													" if(result.valid){\r",
													"     console.log(result);\r",
													"\r",
													" }\r",
													" pm.expect(result.valid).to.be.true;\r",
													"})\r",
													"\r",
													"\r",
													"pm.test(\"Successful GET Request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
													"});\r",
													"pm.test(\"Response time is above 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pet/findByStatus?status=sold",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet",
												"findByStatus"
											],
											"query": [
												{
													"key": "status",
													"value": "sold"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "uploads an image",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Header Value\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
													"     pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check JSON key value pairs in the response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.code).to.eql(200);\r",
													"    pm.expect(jsonData.type).to.eql(\"unknown\");\r",
													"  \r",
													"});\r",
													"\r",
													"\r",
													"//Json Schema Validation\r",
													"\r",
													"var schema = \r",
													"{\r",
													" \r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"code\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"type\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"message\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"code\",\r",
													"    \"type\",\r",
													"    \"message\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test(\"JSON schema validation\", function() {\r",
													" var result=tv4.validateResult(pm.response.json(),schema);\r",
													"\r",
													" if(result.valid){\r",
													"     console.log(result);\r",
													"\r",
													" }\r",
													" pm.expect(result.valid).to.be.true;\r",
													"})\r",
													"\r",
													"//Check the response time\r",
													"pm.test(\"Response time is above 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Successful POST Request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"contentType": "image/jpeg",
													"type": "file",
													"src": "/C:/Users/Admin/OneDrive/Desktop/doggie.jpeg"
												}
											]
										},
										"url": {
											"raw": "https://petstore.swagger.io/v2/pet/10/uploadImage",
											"protocol": "https",
											"host": [
												"petstore",
												"swagger",
												"io"
											],
											"path": [
												"v2",
												"pet",
												"10",
												"uploadImage"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Pets by Status Pending",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Header Value\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
													"     pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"     \"type\": \"array\",\r",
													"  \"items\": [\r",
													"    {\r",
													"      \"type\": \"object\",\r",
													"      \"properties\": {\r",
													"        \"id\": {\r",
													"          \"type\": \"integer\"\r",
													"        },\r",
													"        \"category\": {\r",
													"          \"type\": \"object\",\r",
													"          \"properties\": {\r",
													"            \"id\": {\r",
													"              \"type\": \"integer\"\r",
													"            },\r",
													"            \"name\": {\r",
													"              \"type\": \"string\"\r",
													"            }\r",
													"          },\r",
													"          \"required\": [\r",
													"            \"id\",\r",
													"            \"name\"\r",
													"          ]\r",
													"        },\r",
													"        \"name\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"photoUrls\": {\r",
													"          \"type\": \"array\",\r",
													"          \"items\": [\r",
													"            {\r",
													"              \"type\": \"string\"\r",
													"            }\r",
													"          ]\r",
													"        },\r",
													"        \"tags\": {\r",
													"          \"type\": \"array\",\r",
													"          \"items\": [\r",
													"            {\r",
													"              \"type\": \"object\",\r",
													"              \"properties\": {\r",
													"                \"id\": {\r",
													"                  \"type\": \"integer\"\r",
													"                },\r",
													"                \"name\": {\r",
													"                  \"type\": \"string\"\r",
													"                }\r",
													"              },\r",
													"              \"required\": [\r",
													"                \"id\",\r",
													"                \"name\"\r",
													"              ]\r",
													"            }\r",
													"          ]\r",
													"        },\r",
													"        \"status\": {\r",
													"          \"type\": \"string\"\r",
													"        }\r",
													"      },\r",
													"      \"required\": [\r",
													"        \"id\",\r",
													"        \"category\",\r",
													"        \"name\",\r",
													"        \"photoUrls\",\r",
													"        \"tags\",\r",
													"        \"status\"\r",
													"      ]\r",
													"    }\r",
													"  ]\r",
													"}\r",
													"pm.test(\"JSON schema validation\", function() {\r",
													" var result=tv4.validateResult(pm.response.json(),schema);\r",
													"\r",
													" if(result.valid){\r",
													"     console.log(result);\r",
													"\r",
													" }\r",
													" pm.expect(result.valid).to.be.true;\r",
													"})\r",
													"\r",
													"\r",
													"pm.test(\"Successful GET Request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
													"});\r",
													"pm.test(\"Response time is above 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pet/findByStatus?status=pending",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet",
												"findByStatus"
											],
											"query": [
												{
													"key": "status",
													"value": "pending"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "store",
			"item": [
				{
					"name": "order",
					"item": [
						{
							"name": "{order Id}",
							"item": [
								{
									"name": "Find purchase order by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Header Value\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
													"     pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check Json key pair value\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.id).to.eql(5);\r",
													"    pm.expect(jsonData.petId).to.eql(3);\r",
													"    pm.expect(jsonData.quantity).to.eql(2);\r",
													"    pm.expect(jsonData.shipDate).to.eql(\"2023-05-31T04:36:12.036+0000\");\r",
													"      pm.expect(jsonData.status).to.eql(\"placed\");\r",
													"        pm.expect(jsonData.complete).to.eql(true);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"var schema = \r",
													"{\r",
													"      \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"id\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"petId\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"quantity\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"shipDate\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"complete\": {\r",
													"      \"type\": \"boolean\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"id\",\r",
													"    \"petId\",\r",
													"    \"quantity\",\r",
													"    \"shipDate\",\r",
													"    \"status\",\r",
													"    \"complete\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test(\"JSON schema validation\", function() {\r",
													" var result=tv4.validateResult(pm.response.json(),schema);\r",
													"\r",
													" if(result.valid){\r",
													"     console.log(result);\r",
													"\r",
													" }\r",
													" pm.expect(result.valid).to.be.true;\r",
													"})\r",
													"\r",
													"//Check the response time\r",
													"pm.test(\"Response time is above 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/store/order/5",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"store",
												"order",
												"5"
											]
										},
										"description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions"
									},
									"response": [
										{
											"name": "Invalid ID supplied",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/store/order/:orderId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"store",
														"order",
														":orderId"
													],
													"variable": [
														{
															"key": "orderId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/store/order/:orderId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"store",
														"order",
														":orderId"
													],
													"variable": [
														{
															"key": "orderId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"<long>\",\n \"petId\": \"<long>\",\n \"quantity\": \"<integer>\",\n \"shipDate\": \"<dateTime>\",\n \"status\": \"<string>\",\n \"complete\": \"<boolean>\"\n}"
										},
										{
											"name": "Order not found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/store/order/:orderId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"store",
														"order",
														":orderId"
													],
													"variable": [
														{
															"key": "orderId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete purchase order by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Header Value\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
													"     pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check Json key value pair in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.code).to.eql(200);\r",
													"    pm.expect(jsonData.type).to.eql(\"unknown\");\r",
													"     pm.expect(jsonData.message).to.eql(\"5\");\r",
													"});\r",
													"\r",
													"var schema = \r",
													"{\r",
													"    \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"code\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"type\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"message\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"code\",\r",
													"    \"type\",\r",
													"    \"message\"\r",
													"  ]\r",
													"}\r",
													"pm.test(\"JSON schema validation\", function() {\r",
													" var result=tv4.validateResult(pm.response.json(),schema);\r",
													"\r",
													" if(result.valid){\r",
													"     console.log(result);\r",
													"\r",
													" }\r",
													" pm.expect(result.valid).to.be.true;\r",
													"})\r",
													"\r",
													"//Check the response time\r",
													"pm.test(\"Response time is above 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
													"});\r",
													"pm.test(\"Successful DELETE request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201, 200]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/store/order/5",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"store",
												"order",
												"5"
											]
										},
										"description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors"
									},
									"response": [
										{
											"name": "Invalid ID supplied",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/store/order/:orderId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"store",
														"order",
														":orderId"
													],
													"variable": [
														{
															"key": "orderId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Order not found",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/store/order/:orderId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"store",
														"order",
														":orderId"
													],
													"variable": [
														{
															"key": "orderId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Place an order for a pet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Header Value\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
											"     pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check Json key pair value\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(5);\r",
											"    pm.expect(jsonData.petId).to.eql(3);\r",
											"    pm.expect(jsonData.quantity).to.eql(2);\r",
											"    pm.expect(jsonData.shipDate).to.eql(\"2023-05-31T04:36:12.036+0000\");\r",
											"      pm.expect(jsonData.status).to.eql(\"placed\");\r",
											"        pm.expect(jsonData.complete).to.eql(true);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"var schema = \r",
											"{\r",
											"      \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"petId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"quantity\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"shipDate\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"complete\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"id\",\r",
											"    \"petId\",\r",
											"    \"quantity\",\r",
											"    \"shipDate\",\r",
											"    \"status\",\r",
											"    \"complete\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"JSON schema validation\", function() {\r",
											" var result=tv4.validateResult(pm.response.json(),schema);\r",
											"\r",
											" if(result.valid){\r",
											"     console.log(result);\r",
											"\r",
											" }\r",
											" pm.expect(result.valid).to.be.true;\r",
											"})\r",
											"\r",
											"//Check the response time\r",
											"pm.test(\"Response time is above 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 5,\r\n  \"petId\": 3,\r\n  \"quantity\": 2,\r\n  \"shipDate\": \"2023-05-31T04:36:12.036Z\",\r\n  \"status\": \"placed\",\r\n  \"complete\": true\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"response": [
								{
									"name": "Invalid Order",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/store/order",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"store",
												"order"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": 1,\n  \"petId\": 2,\n  \"quantity\": 3,\n  \"shipDate\": \"2023-05-28T04:36:12.036Z\",\n  \"status\": \"placed\",\n  \"complete\": true\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/store/order",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"store",
												"order"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<long>\",\n \"petId\": \"<long>\",\n \"quantity\": \"<integer>\",\n \"shipDate\": \"<dateTime>\",\n \"status\": \"<string>\",\n \"complete\": \"<boolean>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "Returns pet inventories by status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Header Value\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"     pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"     \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"sold\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"string\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"pending\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"available\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"sold\",\r",
									"    \"string\",\r",
									"    \"pending\",\r",
									"    \"available\"\r",
									"  ]\r",
									"\r",
									"}\r",
									"//Check the response time\r",
									"pm.test(\"Response time is above 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "api_key",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/store/inventory",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"inventory"
							]
						},
						"description": "Returns a map of status codes to quantities"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/store/inventory",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"inventory"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						}
					]
				}
			]
		},
		{
			"name": "user",
			"item": [
				{
					"name": "{username}",
					"item": [
						{
							"name": "Create user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Header Value\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
											"     pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON key value pairs in the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.code).to.eql(200);\r",
											"    pm.expect(jsonData.type).to.eql(\"unknown\");\r",
											"  \r",
											"});\r",
											"\r",
											"\r",
											"//Json Schema Validation\r",
											"\r",
											"var schema = \r",
											"{\r",
											" \r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"code\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"type\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"code\",\r",
											"    \"type\",\r",
											"    \"message\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"JSON schema validation\", function() {\r",
											" var result=tv4.validateResult(pm.response.json(),schema);\r",
											"\r",
											" if(result.valid){\r",
											"     console.log(result);\r",
											"\r",
											" }\r",
											" pm.expect(result.valid).to.be.true;\r",
											"})\r",
											"\r",
											"//Check the response time\r",
											"pm.test(\"Response time is above 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 200]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"id\", 7);\r",
											"pm.collectionVariables.set(\"username\", \"spritithakur\");\r",
											"pm.collectionVariables.set(\"firstname\", \"spriti\");\r",
											"pm.collectionVariables.set(\"lastname\", \"thakur\");\r",
											"pm.collectionVariables.set(\"email\", \"spritithakur@gmail.com\");\r",
											"pm.collectionVariables.set(\"password\", \"745\");\r",
											"pm.collectionVariables.set(\"phone\", \"1234\");\r",
											"pm.collectionVariables.set(\"userStatus\", 1);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": {{id}},\n    \"username\": \"{{username}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastname}}\",\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\",\n    \"phone\": \"{{phone}}\",\n    \"userStatus\": {{userStatus}}\n}\n"
								},
								"url": {
									"raw": "{{baseUrl}}/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user"
									]
								},
								"description": "This can only be done by the logged in user."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": 1010,\n  \"username\": \"spriti\",\n  \"firstName\": \"sapa\",\n  \"lastName\": \"thakur\",\n  \"email\": \"spth@gmail.com\",\n  \"password\": \"1231\",\n  \"phone\": \"12345678\",\n  \"userStatus\": 0\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/user",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get user by user name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Header Value\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
											"     pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON key value pairs in the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(9);\r",
											"    pm.expect(jsonData.username).to.eql(\"spritithakur\");\r",
											"    pm.expect(jsonData.lastname).to.eql(\"thakur\");\r",
											"    pm.expect(jsonData.email).to.eql(\"spritithakur@gmail.com\");\r",
											"    pm.expect(jsonData.password).to.eql(\"123156\");\r",
											"    \r",
											"  \r",
											"});\r",
											"\r",
											"\r",
											"//Json Schema Validation\r",
											"\r",
											"var schema = \r",
											"{\r",
											" \r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"username\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"firstName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"lastName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"email\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"password\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"phone\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userStatus\": {\r",
											"      \"type\": \"integer\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"id\",\r",
											"    \"username\",\r",
											"    \"firstName\",\r",
											"    \"lastName\",\r",
											"    \"email\",\r",
											"    \"password\",\r",
											"    \"phone\",\r",
											"    \"userStatus\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"JSON schema validation\", function() {\r",
											" var result=tv4.validateResult(pm.response.json(),schema);\r",
											"\r",
											" if(result.valid){\r",
											"     console.log(result);\r",
											"\r",
											" }\r",
											" pm.expect(result.valid).to.be.true;\r",
											"})\r",
											"\r",
											"//Check the response time\r",
											"pm.test(\"Response time is above 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Successful GET request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/{{username}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"{{username}}"
									]
								}
							},
							"response": [
								{
									"name": "Invalid username supplied",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/user/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												":username"
											],
											"variable": [
												{
													"key": "username"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/user/user1{{id}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"user1{{id}}"
											]
										}
									},
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": null
								},
								{
									"name": "User not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/user/user1{{id}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"user1{{id}}"
											]
										}
									},
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": null
								}
							]
						},
						{
							"name": "Updated user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Header Value\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
											"     pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON key value pairs in the response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.code).to.eql(200);\r",
											"    pm.expect(jsonData.type).to.eql(\"unknown\");\r",
											" \r",
											"  \r",
											"});\r",
											"\r",
											"\r",
											"//Json Schema Validation\r",
											"\r",
											"var schema = \r",
											"{\r",
											" \r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"code\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"type\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"code\",\r",
											"    \"type\",\r",
											"    \"message\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"JSON schema validation\", function() {\r",
											" var result=tv4.validateResult(pm.response.json(),schema);\r",
											"\r",
											" if(result.valid){\r",
											"     console.log(result);\r",
											"\r",
											" }\r",
											" pm.expect(result.valid).to.be.true;\r",
											"})\r",
											"\r",
											"//Check the response time\r",
											"pm.test(\"Response time is above 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Successful PUT request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 200]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"id\", 7);\r",
											"pm.collectionVariables.set(\"username\", \"spritithakur\");\r",
											"pm.collectionVariables.set(\"firstname\", \"spriti\");\r",
											"pm.collectionVariables.set(\"lastname\", \"thakur\");\r",
											"pm.collectionVariables.set(\"email\", \"spritithakur@gmail.com\");\r",
											"pm.collectionVariables.set(\"password\", \"745\");\r",
											"pm.collectionVariables.set(\"phone\", \"12345\");\r",
											"pm.collectionVariables.set(\"userStatus\", 1);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": {{id}},\n    \"username\": \"{{username}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastname}}\",\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\",\n    \"phone\": \"{{phone}}\",\n    \"userStatus\": {{userStatus}}\n}\n"
								},
								"url": {
									"raw": "{{baseUrl}}/user/{{username}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"{{username}}"
									]
								},
								"description": "This can only be done by the logged in user."
							},
							"response": [
								{
									"name": "User not found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/user/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												":username"
											],
											"variable": [
												{
													"key": "username"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid user supplied",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/user/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												":username"
											],
											"variable": [
												{
													"key": "username"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Header Value\", function () {\r",
											"     pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
											"});\r",
											"\r",
											"//Check the response time\r",
											"pm.test(\"Response time is above 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Successful DELETE request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404, 401]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/{{username}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"{{username}}"
									]
								},
								"description": "This can only be done by the logged in user."
							},
							"response": [
								{
									"name": "Invalid username supplied",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/user/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												":username"
											],
											"variable": [
												{
													"key": "username"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "User not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/user/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												":username"
											],
											"variable": [
												{
													"key": "username"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Logs user into the system",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Header Value\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"     pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check JSON key value pairs in the response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(200);\r",
									"    pm.expect(jsonData.type).to.eql(\"unknown\");\r",
									"  \r",
									"});\r",
									"\r",
									"\r",
									"//Json Schema Validation\r",
									"\r",
									"var schema = \r",
									"{\r",
									" \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"code\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"code\",\r",
									"    \"type\",\r",
									"    \"message\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"JSON schema validation\", function() {\r",
									" var result=tv4.validateResult(pm.response.json(),schema);\r",
									"\r",
									" if(result.valid){\r",
									"     console.log(result);\r",
									"\r",
									" }\r",
									" pm.expect(result.valid).to.be.true;\r",
									"})\r",
									"\r",
									"//Check the response time\r",
									"pm.test(\"Response time is above 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GETrequest\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/login?username=spritithakur&password=745",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": "spritithakur",
									"description": "The user name for login"
								},
								{
									"key": "password",
									"value": "745",
									"description": "The password for login in clear text"
								}
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/login?username=<string>&password=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "<string>"
										},
										{
											"key": "password",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Expires-After",
									"value": "<dateTime>",
									"description": "date in UTC when token expires"
								},
								{
									"key": "X-Rate-Limit",
									"value": "<integer>",
									"description": "calls per hour allowed by the user"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<string>\""
						},
						{
							"name": "Invalid username/password supplied",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/login?username=<string>&password=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "<string>"
										},
										{
											"key": "password",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Logs out current logged in user session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Header Value\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"     pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check JSON key value pairs in the response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(200);\r",
									"    pm.expect(jsonData.type).to.eql(\"unknown\");\r",
									"    pm.expect(jsonData.message).to.eql(\"ok\");\r",
									"  \r",
									"});\r",
									"\r",
									"\r",
									"//Json Schema Validation\r",
									"\r",
									"var schema = \r",
									"{\r",
									" \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"code\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"code\",\r",
									"    \"type\",\r",
									"    \"message\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"JSON schema validation\", function() {\r",
									" var result=tv4.validateResult(pm.response.json(),schema);\r",
									"\r",
									" if(result.valid){\r",
									"     console.log(result);\r",
									"\r",
									" }\r",
									" pm.expect(result.valid).to.be.true;\r",
									"})\r",
									"\r",
									"//Check the response time\r",
									"pm.test(\"Response time is above 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"logout"
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"logout"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Creates list of users with given input array",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Header Value\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"     pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check JSON key value pairs in the response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(200);\r",
									"    pm.expect(jsonData.type).to.eql(\"unknown\");\r",
									"    pm.expect(jsonData.message).to.eql(\"ok\");\r",
									"  \r",
									"});\r",
									"\r",
									"\r",
									"//Json Schema Validation\r",
									"\r",
									"var schema = \r",
									"{\r",
									" \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"code\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"code\",\r",
									"    \"type\",\r",
									"    \"message\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"JSON schema validation\", function() {\r",
									" var result=tv4.validateResult(pm.response.json(),schema);\r",
									"\r",
									" if(result.valid){\r",
									"     console.log(result);\r",
									"\r",
									" }\r",
									" pm.expect(result.valid).to.be.true;\r",
									"})\r",
									"\r",
									"//Check the response time\r",
									"pm.test(\"Response time is above 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"id\": 1,\n        \"username\": \"<anshuthakur>\",\n        \"firstName\": \"<anshu>\",\n        \"lastName\": \"<thakur>\",\n        \"email\": \"<thakur@gmail.com>\",\n        \"password\": \"5454\",\n        \"phone\": \"1215\",\n        \"userStatus\": 1\n    },\n    {\n        \"id\": 2,\n        \"username\": \"hi\",\n        \"firstName\": \"nks\",\n        \"lastName\": \"csdjsd\",\n        \"email\": \"djdb@gmail.com\",\n        \"password\": \"154\",\n        \"phone\": \"1215\",\n        \"userStatus\": 2\n    }\n]"
						},
						"url": {
							"raw": "{{baseUrl}}/user/createWithArray",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"createWithArray"
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/createWithArray",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"createWithArray"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Creates list of users with given input array (list)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Header Value\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"     pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check JSON key value pairs in the response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(200);\r",
									"    pm.expect(jsonData.type).to.eql(\"unknown\");\r",
									"    pm.expect(jsonData.message).to.eql(\"ok\");\r",
									"  \r",
									"});\r",
									"\r",
									"\r",
									"//Json Schema Validation\r",
									"\r",
									"var schema = \r",
									"{\r",
									" \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"code\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"code\",\r",
									"    \"type\",\r",
									"    \"message\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"JSON schema validation\", function() {\r",
									" var result=tv4.validateResult(pm.response.json(),schema);\r",
									"\r",
									" if(result.valid){\r",
									"     console.log(result);\r",
									"\r",
									" }\r",
									" pm.expect(result.valid).to.be.true;\r",
									"})\r",
									"\r",
									"//Check the response time\r",
									"pm.test(\"Response time is above 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"id\": 1,\n        \"username\": \"<anshuthakur>\",\n        \"firstName\": \"<anshu>\",\n        \"lastName\": \"<thakur>\",\n        \"email\": \"<thakur@gmail.com>\",\n        \"password\": \"5454\",\n        \"phone\": \"1215\",\n        \"userStatus\": 1\n    },\n    {\n        \"id\": 2,\n        \"username\": \"hi\",\n        \"firstName\": \"anshu\",\n        \"lastName\": \"kanwar\",\n        \"email\": \"anshukanwar@gmail.com\",\n        \"password\": \"154\",\n        \"phone\": \"1215\",\n        \"userStatus\": 2\n    }\n]"
						},
						"url": {
							"raw": "{{baseUrl}}/user/createWithList",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"createWithList"
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/createWithList",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"createWithList"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://petstore.swagger.io/v2",
			"type": "string"
		},
		{
			"key": "username",
			"value": ""
		},
		{
			"key": "firstName",
			"value": ""
		},
		{
			"key": "lastName",
			"value": ""
		},
		{
			"key": "email",
			"value": ""
		},
		{
			"key": "password",
			"value": ""
		},
		{
			"key": "phone",
			"value": ""
		},
		{
			"key": "userStatus",
			"value": ""
		},
		{
			"key": "id",
			"value": ""
		},
		{
			"key": "firstname",
			"value": ""
		},
		{
			"key": "lastname",
			"value": ""
		}
	]
}