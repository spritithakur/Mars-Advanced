{
	"info": {
		"_postman_id": "83ef6fc4-1cf0-4fe1-b9cd-b7f6a6470066",
		"name": "Dog API_4",
		"description": "No need to set an environment variable. \r\nIt all ready set at collection level",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23437965"
	},
	"item": [
		{
			"name": "DOG API ",
			"item": [
				{
					"name": "Dog  API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Status code 200\r",
									"pm.test(\"Dog.Ceo will respond 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Dog API\");\r",
									"});\r",
									"\r",
									"pm.test(\"Header Value\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/html; charset=UTF-8\");\r",
									"     pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
									"      pm.expect(pm.response.headers.get(\"CF-Cache-Status\")).to.eql(\"DYNAMIC\");\r",
									"  \r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is above 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{DOGApi}}//dog-api/",
							"host": [
								"{{DOGApi}}"
							],
							"path": [
								"",
								"dog-api",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "List of Endpoints",
			"item": [
				{
					"name": "EndPoints Documentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check the status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Check the WebPage contains \"Endpoint\"\r",
									"pm.test(\"Validate the key value pairs with ENDPOINTS\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Endpoints\");\r",
									"});\r",
									"\r",
									"//Value check with End Points\r",
									"\r",
									"//List all breeds\r",
									"pm.test(\"Endpoints must have List all breeds option\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"List all breeds\");\r",
									"});\r",
									"\r",
									"//Random image\r",
									"pm.test(\"Endpoints must have Random Image option\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Random image\");\r",
									"});\r",
									"\r",
									"//By breed\r",
									"pm.test(\"Endpoints must have By breed option \", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"By breed\");\r",
									"});\r",
									"\r",
									"//By sub-breed\r",
									"pm.test(\"Endpoints must have By sub-breed option\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"By sub-breed\");\r",
									"});\r",
									"\r",
									"//Browse breed list\r",
									"pm.test(\"Endpoints must have By Browse breed list option\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Browse breed list\");\r",
									"});\r",
									"\r",
									"//Check the Headers\r",
									"\r",
									"\r",
									"pm.test(\"Header Value\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/html; charset=UTF-8\");\r",
									"     pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
									"      pm.expect(pm.response.headers.get(\"CF-Cache-Status\")).to.eql(\"DYNAMIC\");\r",
									"         \r",
									"  \r",
									"   \r",
									"    \r",
									"\r",
									"});\r",
									"pm.test(\"Response time is above 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
									"});\r",
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{DOGApi}}/dog-api/documentation/",
							"host": [
								"{{DOGApi}}"
							],
							"path": [
								"dog-api",
								"documentation",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Endpoints Verification",
			"item": [
				{
					"name": "Endpoint - 1 List all breeds",
					"item": [
						{
							"name": "List All Breeds",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Header Value\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
											"     pm.expect(pm.response.headers.get(\"Cache-Control\")).to.eql(\"max-age=1800\");\r",
											"     pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
											"      pm.expect(pm.response.headers.get(\"CF-Cache-Status\")).to.eql(\"DYNAMIC\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validate listing data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message.australian).to.eql([\"shepherd\"]);\r",
											"    pm.expect(jsonData.message.buhund).to.eql([\"norwegian\"]);    \r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON key value pair for Shepherd in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message.affenpinscher).to.eql([]);\r",
											"    pm.expect(jsonData.message.african).to.eql([]);\r",
											"    pm.expect(jsonData.message.airedale).to.eql([]);\r",
											"    pm.expect(jsonData.message.akita).to.eql([]);\r",
											"    pm.expect(jsonData.message.appenzeller).to.eql([]);\r",
											"    pm.expect(jsonData.message.australian[0]).to.eql(\"shepherd\");\r",
											"});\r",
											"  \r",
											"\r",
											"  pm.test(\"Check JSON key value pair for norwegian in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message.basenji).to.eql([]);\r",
											"    pm.expect(jsonData.message.beagle).to.eql([]);\r",
											"    pm.expect(jsonData.message.bluetick).to.eql([]);\r",
											"    pm.expect(jsonData.message.borzoi).to.eql([]);\r",
											"    pm.expect(jsonData.message.buhund[0]).to.eql(\"norwegian\");\r",
											"});\r",
											"  var schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"affenpinscher\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"african\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"airedale\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"akita\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"appenzeller\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"australian\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": [\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          ]\r",
											"        },\r",
											"        \"basenji\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"beagle\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"bluetick\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"borzoi\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"bouvier\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"boxer\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"brabancon\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"briard\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"buhund\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": [\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          ]\r",
											"        },\r",
											"        \"bulldog\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": [\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          ]\r",
											"        },\r",
											"        \"bullterrier\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": [\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          ]\r",
											"        },\r",
											"        \"cattledog\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": [\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          ]\r",
											"        },\r",
											"        \"chihuahua\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"chow\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"clumber\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"cockapoo\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"collie\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": [\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          ]\r",
											"        },\r",
											"        \"coonhound\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"corgi\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": [\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          ]\r",
											"        },\r",
											"        \"cotondetulear\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"dachshund\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"dalmatian\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"dane\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": [\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          ]\r",
											"        },\r",
											"        \"deerhound\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": [\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          ]\r",
											"        },\r",
											"        \"dhole\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"dingo\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"doberman\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"elkhound\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": [\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          ]\r",
											"        },\r",
											"        \"entlebucher\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"eskimo\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"finnish\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": [\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          ]\r",
											"        },\r",
											"        \"frise\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": [\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          ]\r",
											"        },\r",
											"        \"germanshepherd\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"greyhound\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": [\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          ]\r",
											"        },\r",
											"        \"groenendael\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"havanese\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"hound\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": [\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          ]\r",
											"        },\r",
											"        \"husky\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"keeshond\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"kelpie\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"komondor\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"kuvasz\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"labradoodle\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"labrador\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"leonberg\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"lhasa\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"malamute\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"malinois\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"maltese\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"mastiff\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": [\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          ]\r",
											"        },\r",
											"        \"mexicanhairless\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"mix\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"mountain\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": [\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          ]\r",
											"        },\r",
											"        \"newfoundland\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"otterhound\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"ovcharka\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": [\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          ]\r",
											"        },\r",
											"        \"papillon\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"pekinese\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"pembroke\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"pinscher\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": [\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          ]\r",
											"        },\r",
											"        \"pitbull\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"pointer\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": [\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          ]\r",
											"        },\r",
											"        \"pomeranian\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"poodle\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": [\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          ]\r",
											"        },\r",
											"        \"pug\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"puggle\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"pyrenees\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"redbone\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"retriever\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": [\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          ]\r",
											"        },\r",
											"        \"ridgeback\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": [\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          ]\r",
											"        },\r",
											"        \"rottweiler\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"saluki\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"samoyed\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"schipperke\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"schnauzer\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": [\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          ]\r",
											"        },\r",
											"        \"segugio\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": [\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          ]\r",
											"        },\r",
											"        \"setter\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": [\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          ]\r",
											"        },\r",
											"        \"sharpei\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"sheepdog\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": [\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          ]\r",
											"        },\r",
											"        \"shiba\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"shihtzu\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"spaniel\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": [\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          ]\r",
											"        },\r",
											"        \"spitz\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": [\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          ]\r",
											"        },\r",
											"        \"springer\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": [\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          ]\r",
											"        },\r",
											"        \"stbernard\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"terrier\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": [\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          ]\r",
											"        },\r",
											"        \"tervuren\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"vizsla\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"waterdog\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": [\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          ]\r",
											"        },\r",
											"        \"weimaraner\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"whippet\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"wolfhound\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": [\r",
											"            {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          ]\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"affenpinscher\",\r",
											"        \"african\",\r",
											"        \"airedale\",\r",
											"        \"akita\",\r",
											"        \"appenzeller\",\r",
											"        \"australian\",\r",
											"        \"basenji\",\r",
											"        \"beagle\",\r",
											"        \"bluetick\",\r",
											"        \"borzoi\",\r",
											"        \"bouvier\",\r",
											"        \"boxer\",\r",
											"        \"brabancon\",\r",
											"        \"briard\",\r",
											"        \"buhund\",\r",
											"        \"bulldog\",\r",
											"        \"bullterrier\",\r",
											"        \"cattledog\",\r",
											"        \"chihuahua\",\r",
											"        \"chow\",\r",
											"        \"clumber\",\r",
											"        \"cockapoo\",\r",
											"        \"collie\",\r",
											"        \"coonhound\",\r",
											"        \"corgi\",\r",
											"        \"cotondetulear\",\r",
											"        \"dachshund\",\r",
											"        \"dalmatian\",\r",
											"        \"dane\",\r",
											"        \"deerhound\",\r",
											"        \"dhole\",\r",
											"        \"dingo\",\r",
											"        \"doberman\",\r",
											"        \"elkhound\",\r",
											"        \"entlebucher\",\r",
											"        \"eskimo\",\r",
											"        \"finnish\",\r",
											"        \"frise\",\r",
											"        \"germanshepherd\",\r",
											"        \"greyhound\",\r",
											"        \"groenendael\",\r",
											"        \"havanese\",\r",
											"        \"hound\",\r",
											"        \"husky\",\r",
											"        \"keeshond\",\r",
											"        \"kelpie\",\r",
											"        \"komondor\",\r",
											"        \"kuvasz\",\r",
											"        \"labradoodle\",\r",
											"        \"labrador\",\r",
											"        \"leonberg\",\r",
											"        \"lhasa\",\r",
											"        \"malamute\",\r",
											"        \"malinois\",\r",
											"        \"maltese\",\r",
											"        \"mastiff\",\r",
											"        \"mexicanhairless\",\r",
											"        \"mix\",\r",
											"        \"mountain\",\r",
											"        \"newfoundland\",\r",
											"        \"otterhound\",\r",
											"        \"ovcharka\",\r",
											"        \"papillon\",\r",
											"        \"pekinese\",\r",
											"        \"pembroke\",\r",
											"        \"pinscher\",\r",
											"        \"pitbull\",\r",
											"        \"pointer\",\r",
											"        \"pomeranian\",\r",
											"        \"poodle\",\r",
											"        \"pug\",\r",
											"        \"puggle\",\r",
											"        \"pyrenees\",\r",
											"        \"redbone\",\r",
											"        \"retriever\",\r",
											"        \"ridgeback\",\r",
											"        \"rottweiler\",\r",
											"        \"saluki\",\r",
											"        \"samoyed\",\r",
											"        \"schipperke\",\r",
											"        \"schnauzer\",\r",
											"        \"segugio\",\r",
											"        \"setter\",\r",
											"        \"sharpei\",\r",
											"        \"sheepdog\",\r",
											"        \"shiba\",\r",
											"        \"shihtzu\",\r",
											"        \"spaniel\",\r",
											"        \"spitz\",\r",
											"        \"springer\",\r",
											"        \"stbernard\",\r",
											"        \"terrier\",\r",
											"        \"tervuren\",\r",
											"        \"vizsla\",\r",
											"        \"waterdog\",\r",
											"        \"weimaraner\",\r",
											"        \"whippet\",\r",
											"        \"wolfhound\"\r",
											"      ]\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"status\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"JSON schema validation\", function() {\r",
											" var result=tv4.validateResult(pm.response.json(),schema);\r",
											"\r",
											" if(result.valid){\r",
											"     console.log(result);\r",
											"\r",
											" }\r",
											" pm.expect(result.valid).to.be.true;\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is above 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Successful GET request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{DOGApi}}/api/breeds/list/all",
									"host": [
										"{{DOGApi}}"
									],
									"path": [
										"api",
										"breeds",
										"list",
										"all"
									]
								},
								"description": "It will get random Dog URL and if click on URL it will give a picture "
							},
							"response": []
						}
					]
				},
				{
					"name": "Endpoint - 2 Random image",
					"item": [
						{
							"name": "Single random image",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Header Value\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
											"     pm.expect(pm.response.headers.get(\"Cache-Control\")).to.eql(\"no-cache, private\");\r",
											"     pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
											"      pm.expect(pm.response.headers.get(\"CF-Cache-Status\")).to.eql(\"DYNAMIC\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"message\");\r",
											"     pm.expect(pm.response.text()).to.include(\"status\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validate JSON key value pair in listing data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"    \r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"  \r",
											"  var schema = {\r",
											" \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"status\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"JSON schema validation\", function() {\r",
											" var result=tv4.validateResult(pm.response.json(),schema);\r",
											"\r",
											" if(result.valid){\r",
											"     console.log(result);\r",
											"\r",
											" }\r",
											" pm.expect(result.valid).to.be.true;\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is above 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Successful GETrequest\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{DOGApi}}/api/breeds/image/random",
									"host": [
										"{{DOGApi}}"
									],
									"path": [
										"api",
										"breeds",
										"image",
										"random"
									]
								}
							},
							"response": []
						},
						{
							"name": "Multiple random images ",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Header Value\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
											"     pm.expect(pm.response.headers.get(\"Cache-Control\")).to.eql(\"no-cache, private\");\r",
											"     pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
											"      pm.expect(pm.response.headers.get(\"CF-Cache-Status\")).to.eql(\"DYNAMIC\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"message\");\r",
											"     pm.expect(pm.response.text()).to.include(\"status\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validate JSON key value pair in listing data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"    \r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"  \r",
											"  var schema = {\r",
											"\"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      ]\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"status\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"JSON schema validation\", function() {\r",
											" var result=tv4.validateResult(pm.response.json(),schema);\r",
											"\r",
											" if(result.valid){\r",
											"     console.log(result);\r",
											"\r",
											" }\r",
											" pm.expect(result.valid).to.be.true;\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is above 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Successful GET request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{DOGApi}}/api/breeds/image/random/3",
									"host": [
										"{{DOGApi}}"
									],
									"path": [
										"api",
										"breeds",
										"image",
										"random",
										"3"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Endpoint -3 By breed",
					"item": [
						{
							"name": "List all images from a  breed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Header Value\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
											"     pm.expect(pm.response.headers.get(\"Cache-Control\")).to.eql(\"max-age=1800\");\r",
											"     pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
											"      pm.expect(pm.response.headers.get(\"CF-Cache-Status\")).to.eql(\"DYNAMIC\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"message\");\r",
											"     pm.expect(pm.response.text()).to.include(\"status\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validate JSON key value pair in listing data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"    \r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"  \r",
											"  var schema = {\r",
											"\"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      ]\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"status\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"JSON schema validation\", function() {\r",
											" var result=tv4.validateResult(pm.response.json(),schema);\r",
											"\r",
											" if(result.valid){\r",
											"     console.log(result);\r",
											"\r",
											" }\r",
											" pm.expect(result.valid).to.be.true;\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is above 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Successful GET request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{DOGApi}}/api/breed/hound/images",
									"host": [
										"{{DOGApi}}"
									],
									"path": [
										"api",
										"breed",
										"hound",
										"images"
									]
								}
							},
							"response": []
						},
						{
							"name": "Random Image From A BREED",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Header Value\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
											"     pm.expect(pm.response.headers.get(\"Cache-Control\")).to.eql(\"no-cache, private\");\r",
											"     pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
											"      pm.expect(pm.response.headers.get(\"CF-Cache-Status\")).to.eql(\"DYNAMIC\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"message\");\r",
											"     pm.expect(pm.response.text()).to.include(\"status\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validate JSON key value pair in response listing data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"    \r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"  \r",
											"  var schema = {\r",
											" \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"status\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"JSON schema validation\", function() {\r",
											" var result=tv4.validateResult(pm.response.json(),schema);\r",
											"\r",
											" if(result.valid){\r",
											"     console.log(result);\r",
											"\r",
											" }\r",
											" pm.expect(result.valid).to.be.true;\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is above 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Successful GET request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{DOGApi}}/api/breed/hound/images/random",
									"host": [
										"{{DOGApi}}"
									],
									"path": [
										"api",
										"breed",
										"hound",
										"images",
										"random"
									]
								},
								"description": "RANDOM IMAGE FROM A BREED COLLECTION"
							},
							"response": []
						},
						{
							"name": "Multiple images from a breed collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Header Value\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
											"     pm.expect(pm.response.headers.get(\"Cache-Control\")).to.eql(\"no-cache, private\");\r",
											"     pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
											"      pm.expect(pm.response.headers.get(\"CF-Cache-Status\")).to.eql(\"DYNAMIC\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"message\");\r",
											"     pm.expect(pm.response.text()).to.include(\"status\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validate JSON key value pair in listing data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"    \r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"  \r",
											"  var schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      ]\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"status\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"JSON schema validation\", function() {\r",
											" var result=tv4.validateResult(pm.response.json(),schema);\r",
											"\r",
											" if(result.valid){\r",
											"     console.log(result);\r",
											"\r",
											" }\r",
											" pm.expect(result.valid).to.be.true;\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is above 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Successful GET request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{DOGApi}}/api/breed/hound/images/random/3",
									"host": [
										"{{DOGApi}}"
									],
									"path": [
										"api",
										"breed",
										"hound",
										"images",
										"random",
										"3"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Endpoint - 4 By sub-breed",
					"item": [
						{
							"name": "List all sub-breed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Header Value\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
											"     pm.expect(pm.response.headers.get(\"Cache-Control\")).to.eql(\"max-age=1800\");\r",
											"     pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
											"      pm.expect(pm.response.headers.get(\"CF-Cache-Status\")).to.eql(\"DYNAMIC\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"message\");\r",
											"     pm.expect(pm.response.text()).to.include(\"status\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validate JSON key value pair in response listing data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"     pm.expect(jsonData.message[0]).to.eql(\"afghan\");\r",
											"     pm.expect(jsonData.message[1]).to.eql(\"basset\");\r",
											"     pm.expect(jsonData.message[2]).to.eql(\"blood\");\r",
											"     pm.expect(jsonData.message[3]).to.eql(\"english\");\r",
											"     pm.expect(jsonData.message[4]).to.eql(\"ibizan\");\r",
											"    \r",
											"    \r",
											"});\r",
											"\r",
											"var schema = {\r",
											"\r",
											"\"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      ]\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"status\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"JSON schema validation\", function() {\r",
											" var result=tv4.validateResult(pm.response.json(),schema);\r",
											"\r",
											" if(result.valid){\r",
											"     console.log(result);\r",
											"\r",
											" }\r",
											" pm.expect(result.valid).to.be.true;\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is above 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Successful GET request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{DOGApi}}/api/breed/hound/list",
									"host": [
										"{{DOGApi}}"
									],
									"path": [
										"api",
										"breed",
										"hound",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all sub-breed images",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Header Value\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
											"     pm.expect(pm.response.headers.get(\"Cache-Control\")).to.eql(\"max-age=1800\");\r",
											"     pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
											"      pm.expect(pm.response.headers.get(\"CF-Cache-Status\")).to.eql(\"DYNAMIC\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"message\");\r",
											"     pm.expect(pm.response.text()).to.include(\"status\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validate JSON key value pair response in listing data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"    \r",
											"    \r",
											"});\r",
											"\r",
											"var schema = {\r",
											"\r",
											"\"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      ]\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"status\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"JSON schema validation\", function() {\r",
											" var result=tv4.validateResult(pm.response.json(),schema);\r",
											"\r",
											" if(result.valid){\r",
											"     console.log(result);\r",
											"\r",
											" }\r",
											" pm.expect(result.valid).to.be.true;\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is above 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Successful GET request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{DOGApi}}/api/breed/hound/afghan/images",
									"host": [
										"{{DOGApi}}"
									],
									"path": [
										"api",
										"breed",
										"hound",
										"afghan",
										"images"
									]
								}
							},
							"response": []
						},
						{
							"name": "Single random image from sub-breed collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Header Value\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
											"     pm.expect(pm.response.headers.get(\"Cache-Control\")).to.eql(\"no-cache, private\");\r",
											"     pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
											"      pm.expect(pm.response.headers.get(\"CF-Cache-Status\")).to.eql(\"DYNAMIC\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"message\");\r",
											"     pm.expect(pm.response.text()).to.include(\"status\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validate JSON key value pair in response listing data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"    \r",
											"\r",
											"    pm.test(\"Successful GET request\", function () {\r",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
											"    });\r",
											"});\r",
											"\r",
											"var schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"status\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"JSON schema validation\", function() {\r",
											" var result=tv4.validateResult(pm.response.json(),schema);\r",
											"\r",
											" if(result.valid){\r",
											"     console.log(result);\r",
											"\r",
											" }\r",
											" pm.expect(result.valid).to.be.true;\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is above 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{DOGApi}}/api/breed/hound/afghan/images/random",
									"host": [
										"{{DOGApi}}"
									],
									"path": [
										"api",
										"breed",
										"hound",
										"afghan",
										"images",
										"random"
									]
								}
							},
							"response": []
						},
						{
							"name": "Multiple images from sub-breed collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Header Value\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
											"     pm.expect(pm.response.headers.get(\"Cache-Control\")).to.eql(\"no-cache, private\");\r",
											"     pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
											"      pm.expect(pm.response.headers.get(\"CF-Cache-Status\")).to.eql(\"DYNAMIC\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"message\");\r",
											"     pm.expect(pm.response.text()).to.include(\"status\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validate JSON key value pair in listing data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"    \r",
											"    \r",
											"});\r",
											"\r",
											"var schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      ]\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"status\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"JSON schema validation\", function() {\r",
											" var result=tv4.validateResult(pm.response.json(),schema);\r",
											"\r",
											" if(result.valid){\r",
											"     console.log(result);\r",
											"\r",
											" }\r",
											" pm.expect(result.valid).to.be.true;\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is above 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Successful GET request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{DOGApi}}/api/breed/hound/afghan/images/random/3",
									"host": [
										"{{DOGApi}}"
									],
									"path": [
										"api",
										"breed",
										"hound",
										"afghan",
										"images",
										"random",
										"3"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Endpoint -5 By Browse Breed",
					"item": [
						{
							"name": "Browse Breeds List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Header Value\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
											"     pm.expect(pm.response.headers.get(\"Cache-Control\")).to.eql(\"no-cache, private\");\r",
											"     pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
											"      pm.expect(pm.response.headers.get(\"CF-Cache-Status\")).to.eql(\"DYNAMIC\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"message\");\r",
											"     pm.expect(pm.response.text()).to.include(\"status\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validate JSON key value pair in response listing data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"    \r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"  \r",
											"  var schema = {\r",
											" \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"status\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"JSON schema validation\", function() {\r",
											" var result=tv4.validateResult(pm.response.json(),schema);\r",
											"\r",
											" if(result.valid){\r",
											"     console.log(result);\r",
											"\r",
											" }\r",
											" pm.expect(result.valid).to.be.true;\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is above 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Successful GET request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{DOGApi}}/api/breeds/image/random",
									"host": [
										"{{DOGApi}}"
									],
									"path": [
										"api",
										"breeds",
										"image",
										"random"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "Set an assretion at folder level for status code and status as success. \r\n",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"//Check Satus code ",
							"pm.test(\"Check status code 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Check responce has status as success",
							"pm.test(\"Response status has to be success \", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(\"success\");",
							"});",
							""
						]
					}
				}
			]
		},
		{
			"name": "Negative Scenarios",
			"item": [
				{
					"name": "Get End Point Documentation with invalid URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"The requested URL was not found on this server\");\r",
									"});\r",
									"pm.test(\"Response time is above 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
									"});\r",
									"pm.test(\"Header Value\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/html; charset=iso-8859-1\");\r",
									"   pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
									"    pm.expect(pm.response.headers.get(\"CF-Cache-Status\")).to.eql(\"DYNAMIC\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{DOGApi}}/dog-api/documentation/123",
							"host": [
								"{{DOGApi}}"
							],
							"path": [
								"dog-api",
								"documentation",
								"123"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get End Point Documentation with invalid HTTP Header",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"cloudflare\");\r",
									"});\r",
									"pm.test(\"Response time is below 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Header Value\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/html\");\r",
									"   pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"close\");\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{DOGApi}}/dog-api/documentation/",
							"host": [
								"{{DOGApi}}"
							],
							"path": [
								"dog-api",
								"documentation",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Breeds List with changing request method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"\r",
									"      \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"status\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"code\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"status\",\r",
									"    \"message\",\r",
									"    \"code\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"JSON schema validation\", function() {\r",
									" var result=tv4.validateResult(pm.response.json(),schema);\r",
									"\r",
									" if(result.valid){\r",
									"     console.log(result);\r",
									"\r",
									" }\r",
									" pm.expect(result.valid).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"error\");\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Check JSON key value pair in response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"error\");\r",
									"    pm.expect(jsonData.message).to.eql(\"No route found for \\\"PUT http://dog.ceo/api/breeds/list/all\\\": Method Not Allowed (Allow: GET, HEAD) with code: 0\");\r",
									"    pm.expect(jsonData.code).to.eql(405);\r",
									"});\r",
									"pm.test(\"Response time is above 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
									"});\r",
									"pm.test(\"Header Value\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"   pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
									"    \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{DOGApi}}/api/breeds/list/all",
							"host": [
								"{{DOGApi}}"
							],
							"path": [
								"api",
								"breeds",
								"list",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Single random image with invalid HTTP Headers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Header Value\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/html\");\r",
									"     pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"close\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is below 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"400 Bad Request\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{DOGApi}}/api/breeds/image/random",
							"host": [
								"{{DOGApi}}"
							],
							"path": [
								"api",
								"breeds",
								"image",
								"random"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET List of all sub-breed images with invalid value for endpoint",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"\r",
									"      \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"status\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"code\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"status\",\r",
									"    \"message\",\r",
									"    \"code\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"JSON schema validation\", function() {\r",
									" var result=tv4.validateResult(pm.response.json(),schema);\r",
									"\r",
									" if(result.valid){\r",
									"     console.log(result);\r",
									"\r",
									" }\r",
									" pm.expect(result.valid).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"error\");\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Check JSON key value pair in response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"error\");\r",
									"    pm.expect(jsonData.message).to.eql(\"Breed not found (master breed does not exist)\");\r",
									"    pm.expect(jsonData.code).to.eql(404);\r",
									"});\r",
									"pm.test(\"Response time is above 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
									"});\r",
									"pm.test(\"Header Value\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"   pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
									"    \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{DOGApi}}/api/breed/images",
							"host": [
								"{{DOGApi}}"
							],
							"path": [
								"api",
								"breed",
								"images"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Multiple images from sub-breed collection with invalid UUID in Path",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"\r",
									"      \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"status\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"code\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"status\",\r",
									"    \"message\",\r",
									"    \"code\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"JSON schema validation\", function() {\r",
									" var result=tv4.validateResult(pm.response.json(),schema);\r",
									"\r",
									" if(result.valid){\r",
									"     console.log(result);\r",
									"\r",
									" }\r",
									" pm.expect(result.valid).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"error\");\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Check JSON key value pair in response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"error\");\r",
									"    pm.expect(jsonData.message).to.eql(\"No route found for \\\"GET http://dog.ceo/api/breeds/image/ram\\\" with code: 0\");\r",
									"    pm.expect(jsonData.code).to.eql(404);\r",
									"});\r",
									"pm.test(\"Response time is above 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
									"});\r",
									"pm.test(\"Header Value\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"   pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
									"    \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{DOGApi}}/api/breeds/image/:type",
							"host": [
								"{{DOGApi}}"
							],
							"path": [
								"api",
								"breeds",
								"image",
								":type"
							],
							"variable": [
								{
									"key": "type",
									"value": "ram"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Dog  API with invalid UUID in Path",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Header Value\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/html; charset=iso-8859-1\");\r",
									"     pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
									"       pm.expect(pm.response.headers.get(\"CF-Cache-Status\")).to.eql(\"DYNAMIC\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is above 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"404 Not Found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{DOGApi}}//:API/",
							"host": [
								"{{DOGApi}}"
							],
							"path": [
								"",
								":API",
								""
							],
							"variable": [
								{
									"key": "API",
									"value": "dog-API"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://dog.ceo",
			"type": "string"
		}
	]
}