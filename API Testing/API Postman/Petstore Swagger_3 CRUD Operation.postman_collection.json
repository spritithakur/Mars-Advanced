{
	"info": {
		"_postman_id": "e8c82aba-49c1-48c5-86e0-6076c25d9fa7",
		"name": "Petstore Swagger_3 CRUD Operation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23437965"
	},
	"item": [
		{
			"name": "Positive Scenarios",
			"item": [
				{
					"name": "Add a new pet to the store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var requestData = JSON.parse(pm.request.body.raw);",
									"//status check- 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//value check ",
									"//Response body: JSON value check - from snippet",
									"pm.test(\"verify JSON key value pair in pet name response\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(requestData.name);",
									"    pm.expect(jsonData.photoUrls[0]).to.eql(\"hey Doggie\");",
									"    pm.expect(jsonData.tags[0].id).to.eql(2);",
									"    pm.expect(jsonData.tags[0].name).to.eql(\"robin\");",
									"",
									"});",
									"",
									"pm.test(\"Header Value\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");",
									"  ",
									"});",
									"",
									"",
									"var schema = ",
									"{",
									" ",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"id\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"category\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"name\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"name\"",
									"      ]",
									"    },",
									"    \"name\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"photoUrls\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"string\"",
									"        }",
									"      ]",
									"    },",
									"    \"tags\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"id\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"id\",",
									"            \"name\"",
									"          ]",
									"        }",
									"      ]",
									"    },",
									"    \"status\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"id\",",
									"    \"category\",",
									"    \"name\",",
									"    \"photoUrls\",",
									"    \"tags\",",
									"    \"status\"",
									"  ]",
									"}",
									"",
									"pm.test(\"JSON schema validation\", function() {",
									" var result=tv4.validateResult(pm.response.json(),schema);",
									"",
									" if(result.valid){",
									"     console.log(result);",
									"",
									" }",
									" pm.expect(result.valid).to.be.true;",
									"})",
									"",
									"//Check the response time",
									"pm.test(\"Response time is above 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.above(200);",
									"});",
									"",
									"pm.test(\"Successful POST Request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 10,\r\n  \"category\": {\r\n    \"id\": 1,\r\n    \"name\": \"casper king\"\r\n  },\r\n  \"name\": \"bow-wow\",\r\n  \"photoUrls\": [\r\n    \"hey Doggie\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 2,\r\n      \"name\": \"robin\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": [
						{
							"name": "Invalid input",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Find pet by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//status check- status code: code is 200",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"//value check ",
									"//Response body: JSON value check - from snippet",
									"pm.test(\"verify pet name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"bow-wow\");",
									"     pm.expect(jsonData.photoUrls[0]).to.eql(\"hey Doggie\");",
									"    pm.expect(jsonData.tags[0].id).to.eql(2);",
									"    pm.expect(jsonData.tags[0].name).to.eql(\"robin\");",
									"",
									"});",
									"",
									"",
									"pm.test(\"Header Value\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");",
									"  ",
									"});",
									"",
									"",
									"var schema = ",
									"{",
									" ",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"id\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"category\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"name\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"name\"",
									"      ]",
									"    },",
									"    \"name\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"photoUrls\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"string\"",
									"        }",
									"      ]",
									"    },",
									"    \"tags\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"id\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"id\",",
									"            \"name\"",
									"          ]",
									"        }",
									"      ]",
									"    },",
									"    \"status\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"id\",",
									"    \"category\",",
									"    \"name\",",
									"    \"photoUrls\",",
									"    \"tags\",",
									"    \"status\"",
									"  ]",
									"}",
									"",
									"pm.test(\"JSON schema validation\", function() {",
									" var result=tv4.validateResult(pm.response.json(),schema);",
									"",
									" if(result.valid){",
									"     console.log(result);",
									"",
									" }",
									" pm.expect(result.valid).to.be.true;",
									"})",
									"",
									"//Check the response time",
									"pm.test(\"Response time is above 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.above(200);",
									"});",
									"",
									"pm.test(\"Successful GET Request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "api_key",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet/{{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"{{id}}"
							]
						},
						"description": "Returns a single pet"
					},
					"response": [
						{
							"name": "Invalid ID supplied",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"name\": \"doggie\",\n \"photoUrls\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"id\": \"<long>\",\n \"category\": {\n  \"id\": \"<long>\",\n  \"name\": \"<string>\"\n },\n \"tags\": [\n  {\n   \"id\": \"<long>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"id\": \"<long>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"status\": \"<string>\"\n}"
						},
						{
							"name": "Pet not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Update an existing pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//valure check ",
									"//Response body: JSON value check - from snippet",
									"pm.test(\"verify JSON Key value pair in pet name response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"bow-wow\");",
									"       pm.expect(jsonData.photoUrls[0]).to.eql(\"hey Doggie\");",
									"    pm.expect(jsonData.tags[0].id).to.eql(2);",
									"    pm.expect(jsonData.tags[0].name).to.eql(\"robin\");",
									"    pm.expect(jsonData.status).to.eql(\"available\");",
									"});",
									"",
									"",
									"pm.test(\"Header Value\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");",
									"  ",
									"});",
									"",
									"var schema = {",
									"",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"id\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"category\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"name\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"name\"",
									"      ]",
									"    },",
									"    \"name\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"photoUrls\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"string\"",
									"        }",
									"      ]",
									"    },",
									"    \"tags\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"id\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"id\",",
									"            \"name\"",
									"          ]",
									"        }",
									"      ]",
									"    },",
									"    \"status\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"id\",",
									"    \"category\",",
									"    \"name\",",
									"    \"photoUrls\",",
									"    \"tags\",",
									"    \"status\"",
									"  ]",
									"}",
									"",
									"pm.test(\"JSON schema validation\", function() {",
									" var result=tv4.validateResult(pm.response.json(),schema);",
									"",
									" if(result.valid){",
									"     console.log(result);",
									"",
									" }",
									" pm.expect(result.valid).to.be.true;",
									"})",
									"",
									"//Check the response time",
									"pm.test(\"Response time is above 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.above(200);",
									"});",
									"",
									"pm.test(\"Successful PUT Request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 10,\r\n  \"category\": {\r\n    \"id\": 1,\r\n    \"name\": \"Noori\"\r\n  },\r\n  \"name\": \"bow-wow\",\r\n  \"photoUrls\": [\r\n    \"hey Doggie\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 2,\r\n      \"name\": \"robin\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": [
						{
							"name": "Pet not found",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Invalid ID supplied",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Validation exception",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Deletes a pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"//Status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Header Value\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
									"  \r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"code\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"code\",\r",
									"    \"type\",\r",
									"    \"message\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"JSON schema validation\", function() {\r",
									" var result=tv4.validateResult(pm.response.json(),schema);\r",
									"\r",
									" if(result.valid){\r",
									"     console.log(result);\r",
									"\r",
									" }\r",
									" pm.expect(result.valid).to.be.true;\r",
									"})\r",
									"\r",
									"//Check the response time\r",
									"pm.test(\"Response time is above 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "api_key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/pet/{{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"{{id}}"
							]
						}
					},
					"response": [
						{
							"name": "Invalid ID supplied",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Pet not found",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "api_key",
										"value": "<string>"
									},
									{
										"key": "api_key",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "Negative Scenarios",
			"item": [
				{
					"name": "Add a new pet to the store with invalid required parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"//status check- 200\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//value check \r",
									"//Response body: JSON value check - from snippet\r",
									"pm.test(\"verify JSON key value pair in pet name response\", function () {\r",
									"    \r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(400);\r",
									"    pm.expect(jsonData.type).to.eql(\"unknown\");\r",
									"    pm.expect(jsonData.message).to.eql(\"bad input\");\r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"Header Value\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
									"  \r",
									"});\r",
									"\r",
									"\r",
									"var schema = \r",
									"{\r",
									" \r",
									"   \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"code\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"code\",\r",
									"    \"type\",\r",
									"    \"message\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"JSON schema validation\", function() {\r",
									" var result=tv4.validateResult(pm.response.json(),schema);\r",
									"\r",
									" if(result.valid){\r",
									"     console.log(result);\r",
									"\r",
									" }\r",
									" pm.expect(result.valid).to.be.true;\r",
									"})\r",
									"\r",
									"//Check the response time\r",
									"pm.test(\"Response time is above 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": umpire,\r\n  \"category\": {\r\n    \"id\": 1,\r\n    \"name\": \"casper king\"\r\n  },\r\n  \"name\": \"bow-wow\",\r\n  \"photoUrls\": [\r\n    \"hey Doggie\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 2,\r\n      \"name\": \"robin\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add new pet to the store with invalid URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"//status check- 200\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"null for uri: http://petstore.swagger.io/v2/pets\");\r",
									"});\r",
									" \r",
									"pm.test(\"Header Value\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/xml\");\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
									"  \r",
									"});\r",
									"\r",
									"\r",
									"  \r",
									"\r",
									"//Check the response time\r",
									"pm.test(\"Response time is above 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 10,\r\n  \"category\": {\r\n    \"id\": 1,\r\n    \"name\": \"casper king\"\r\n  },\r\n  \"name\": \"bow-wow\",\r\n  \"photoUrls\": [\r\n    \"hey Doggie\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 2,\r\n      \"name\": \"robin\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pets",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add new pet to the store with XML Body request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"//status check- 200\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//value check \r",
									"//Response body: JSON value check - from snippet\r",
									"pm.test(\"verify JSON key value pair in pet name response\", function () {\r",
									"    \r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(400);\r",
									"    pm.expect(jsonData.type).to.eql(\"unknown\");\r",
									"    pm.expect(jsonData.message).to.eql(\"javax.xml.bind.UnmarshalException\\n - with linked exception:\\n[org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 1; Content is not allowed in prolog.]\");\r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"Header Value\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
									"  \r",
									"});\r",
									"\r",
									"\r",
									"var schema = \r",
									"{\r",
									" \r",
									"   \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"code\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"code\",\r",
									"    \"type\",\r",
									"    \"message\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"JSON schema validation\", function() {\r",
									" var result=tv4.validateResult(pm.response.json(),schema);\r",
									"\r",
									" if(result.valid){\r",
									"     console.log(result);\r",
									"\r",
									" }\r",
									" pm.expect(result.valid).to.be.true;\r",
									"})\r",
									"\r",
									"//Check the response time\r",
									"pm.test(\"Response time is above 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": umpire,\r\n  \"category\": {\r\n    \"id\": 1,\r\n    \"name\": \"casper king\"\r\n  },\r\n  \"name\": \"bow-wow\",\r\n  \"photoUrls\": [\r\n    \"hey Doggie\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 2,\r\n      \"name\": \"robin\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add new pet to the store with empty request data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"//status check- 200\r",
									"pm.test(\"Status code is 415\", function () {\r",
									"    pm.response.to.have.status(415);\r",
									"});\r",
									"\r",
									"//value check \r",
									"//Response body: JSON value check - from snippet\r",
									"pm.test(\"verify JSON key value pair in pet name response\", function () {\r",
									"    \r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(415);\r",
									"    pm.expect(jsonData.type).to.eql(\"unknown\");\r",
									"    pm.expect(jsonData.message).to.eql(\"com.sun.jersey.api.MessageException: A message body reader for Java class io.swagger.sample.model.Pet, and Java type class io.swagger.sample.model.Pet, and MIME media type application/octet-stream was not found.\\nThe registered message body readers compatible with the MIME media type are:\\n*/* ->\\n  com.sun.jersey.core.impl.provider.entity.FormProvider\\n  com.sun.jersey.core.impl.provider.entity.StringProvider\\n  com.sun.jersey.core.impl.provider.entity.ByteArrayProvider\\n  com.sun.jersey.core.impl.provider.entity.FileProvider\\n  com.sun.jersey.core.impl.provider.entity.InputStreamProvider\\n  com.sun.jersey.core.impl.provider.entity.DataSourceProvider\\n  com.sun.jersey.core.impl.provider.entity.XMLJAXBElementProvider$General\\n  com.sun.jersey.core.impl.provider.entity.ReaderProvider\\n  com.sun.jersey.core.impl.provider.entity.DocumentProvider\\n  com.sun.jersey.core.impl.provider.entity.SourceProvider$StreamSourceReader\\n  com.sun.jersey.core.impl.provider.entity.SourceProvider$SAXSourceReader\\n  com.sun.jersey.core.impl.provider.entity.SourceProvider$DOMSourceReader\\n  com.sun.jersey.json.impl.provider.entity.JSONJAXBElementProvider$General\\n  com.sun.jersey.json.impl.provider.entity.JSONArrayProvider$General\\n  com.sun.jersey.json.impl.provider.entity.JSONObjectProvider$General\\n  com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider\\n  com.sun.jersey.core.impl.provider.entity.XMLRootElementProvider$General\\n  com.sun.jersey.core.impl.provider.entity.XMLListElementProvider$General\\n  com.sun.jersey.core.impl.provider.entity.XMLRootObjectProvider$General\\n  com.sun.jersey.core.impl.provider.entity.EntityHolderReader\\n  com.sun.jersey.json.impl.provider.entity.JSONRootElementProvider$General\\n  com.sun.jersey.json.impl.provider.entity.JSONListElementProvider$General\\n  com.sun.jersey.json.impl.provider.entity.JacksonProviderProxy\\napplication/octet-stream ->\\n  com.sun.jersey.core.impl.provider.entity.ByteArrayProvider\\n  com.sun.jersey.core.impl.provider.entity.FileProvider\\n  com.sun.jersey.core.impl.provider.entity.InputStreamProvider\\n  com.sun.jersey.core.impl.provider.entity.DataSourceProvider\\n  com.sun.jersey.core.impl.provider.entity.RenderedImageProvider\\n\");\r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"Header Value\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
									"  \r",
									"});\r",
									"\r",
									"\r",
									"var schema = \r",
									"{\r",
									" \r",
									"   \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"code\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"code\",\r",
									"    \"type\",\r",
									"    \"message\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"JSON schema validation\", function() {\r",
									" var result=tv4.validateResult(pm.response.json(),schema);\r",
									"\r",
									" if(result.valid){\r",
									"     console.log(result);\r",
									"\r",
									" }\r",
									" pm.expect(result.valid).to.be.true;\r",
									"})\r",
									"\r",
									"//Check the response time\r",
									"pm.test(\"Response time is above 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find pet by ID with invalid URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"null for uri: http://petstore.swagger.io/v2/pet/pet=123456/10\");\r",
									"});\r",
									"\r",
									"pm.test(\"Header Value\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/xml\");\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
									"  \r",
									"});\r",
									"pm.test(\"Response time is above 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/pet=123456/{{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"pet=123456",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find pet by ID with invalid Header",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Header Value\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/html\");\r",
									"     pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"close\");\r",
									"  \r",
									"});\r",
									"\r",
									"pm.test(\"Response time is above 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"400 Bad Request\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/{{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an exisitng pet with changing request method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"pm.test(\"Header Value\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/xml\");\r",
									"     pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
									"  \r",
									"});\r",
									"\r",
									"pm.test(\"Response time is above 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"unknown\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 10,\r\n  \"category\": {\r\n    \"id\": 1,\r\n    \"name\": \"casper king\"\r\n  },\r\n  \"name\": \"bow-wow\",\r\n  \"photoUrls\": [\r\n    \"hey Doggie\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 2,\r\n      \"name\": \"robin\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an exisitng pet with invalid request data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = \r",
									"{\r",
									" \r",
									"   \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"code\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"code\",\r",
									"    \"type\",\r",
									"    \"message\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"JSON schema validation\", function() {\r",
									" var result=tv4.validateResult(pm.response.json(),schema);\r",
									"\r",
									" if(result.valid){\r",
									"     console.log(result);\r",
									"\r",
									" }\r",
									" pm.expect(result.valid).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check JSON key value pair in response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(400);\r",
									"        pm.expect(jsonData.type).to.eql(\"unknown\");\r",
									"            pm.expect(jsonData.message).to.eql(\"bad input\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is above 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Header Value\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
									"  \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": helo,\r\n  \"category\": {\r\n    \"id\": 1,\r\n    \"name\": \"94145153\"\r\n  },\r\n  \"name\": \"bow-wow\",\r\n  \"photoUrls\": [\r\n    \"hey Doggie\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 2,\r\n      \"name\": \"robin\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a pet without providing pet ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"//Status code\r",
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Header Value\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/xml\");\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
									"  \r",
									"});\r",
									"\r",
									"\r",
									"//Check the response time\r",
									"pm.test(\"Response time is above 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/?id=123",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "123"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Creates list of users with given input array by invalid UUID in Path",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"pm.test(\"Header Value\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/xml\");\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\");\r",
									"  \r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"unknown\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is above 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"id\": 1,\r\n        \"username\": \"<anshuthakur>\",\r\n        \"firstName\": \"<anshu>\",\r\n        \"lastName\": \"<thakur>\",\r\n        \"email\": \"<thakur@gmail.com>\",\r\n        \"password\": \"5454\",\r\n        \"phone\": \"1215\",\r\n        \"userStatus\": 1\r\n    },\r\n    {\r\n        \"id\": 2,\r\n        \"username\": \"hi\",\r\n        \"firstName\": \"anshu\",\r\n        \"lastName\": \"kanwar\",\r\n        \"email\": \"anshukanwar@gmail.com\",\r\n        \"password\": \"154\",\r\n        \"phone\": \"1215\",\r\n        \"userStatus\": 2\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/:List",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								":List"
							],
							"variable": [
								{
									"key": "List",
									"value": "createWithList1"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}